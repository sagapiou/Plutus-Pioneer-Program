launch Haddock documentation from a local static site web server

Open a nix shell in plutus folder
> cd path/to/plutus
> nix-shell

Move out of the plutus folder an create a new folder to store the web server executable
[nix-shell:path/to/plutus] > mkdir path/to/haddock-web
[nix-shell:path/to/plutus] > cd path/to/haddock-web
[nix-shell:path/to/haddock-web] > echo "module Main where" > main.hs

Open main.hs in your editor and copy-paste the following code. Notice that no dependencies have to be installed because we are re-using plutus' ones

--------------------------------------------------------------------------------------------------------------

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}

module Main where

import qualified Servant.Server.StaticFiles as Static
import qualified Servant.Server as Server
import Servant.API ( Raw, type (:>) )
import Servant
    ( Proxy(..),
      Application,
      Raw,
      type (:>),
      serve,
      serveDirectoryWebApp)
import Data.Kind ()
import Network.Wai.Handler.Warp (run)
import System.Directory ( getSymbolicLinkTarget )
import System.FilePath.Posix ((</>))
import System.Environment (getArgs)
import System.Exit as Exit ( die )

type Haddock = "plutus-haddock" :> Raw

serverPort :: Int
serverPort = 8081

server :: FilePath -> Server.Server Haddock
server = serveDirectoryWebApp

myApi :: Proxy Haddock
myApi = Proxy

app :: FilePath -> Application
app = serve myApi . server

main :: IO ()
main = do
    args <- getArgs
    rootPath <- 
      case args of
        "-s":pathToHaddockSymLink:_  -> getSymbolicLinkTarget pathToHaddockSymLink
        "-p":pathToNixStoreHaddock:_ -> return pathToNixStoreHaddock
        _                            -> die "unrecognize input params. Use -s <path/to/haddock/symbolic/link> or -p <path/to/nix/store/haddock/> "
    let indexPath = rootPath </> "share" </> "doc"
    putStrLn $ "running plutus documentation in http://localhost:" <> show serverPort <> "/plutus-haddock/index.html"
    run serverPort $ app indexPath

--------------------------------------------------------------------------------------------------------------

Compile main.hs file directly with ghc into an executable.
#         This is the executable's name --|
[nix-shell:path/to/haddock-web] > ghc -o plutus-haddock main.hs
[1 of 1] Compiling Main             ( main.hs, main.o )
Linking plutus-haddock ...


either of below 
plutus-haddock -s ~/plutus/result
plutus-haddock -p /nix/store/7h65546y7f37h7ma1p16n2dcnmbsx5d1-haddock-join/

please notice that /nix/store path depends on plutus's commit, which changes every week. Whereas the symbolic link hasn't changed since week01 but you have to build it manually using the instructions at the begining of this document.

When runnig the executable you should see the follwing output

[path/to/haddock-web] > ./plutus-haddock -s <path>/<to>/<plutus>/result # notice that nix-shell isn't necessary anymore running plutus documentation in http://localhost:8081/plutus-haddock/index.html
now your plutus documentation is running in the given URL with js enable.